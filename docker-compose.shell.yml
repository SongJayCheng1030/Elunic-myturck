version: '3.7'

volumes:
  mysqldata: {}
  keycloak_data: {}
  influxdb_storage: {}
  grafana_data: {}
  rabbitmq_data: {}

services:
  app:
    build:
      context: _fixtures/dockershell
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 14
        NPM_VERSION: 6
        NESTJS_VERSION: 7
        NG_VERSION: 13
    image: shopfloor.io-turck-dev
    hostname: shopfloor.io-turck-dev
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    working_dir: /app
    depends_on:
      - db
      - db-testing
      - phpmyadmin
      - keycloak
      - influxdb
      - grafana
      - rabbitmq
      # Example for a separate database for a specific service
      # - db-backend2
    volumes:
      - ./:/app
      - ~/.npmrc:/root/.npmrc
      - ~/.npmrc:/home/node/.npmrc
      - ~/.npm/:/home/node/.npm
      # - '${SSH_AUTH_SOCK:-/tmp/_ssh_auth_sock_stub}:${SSH_AUTH_SOCK:-/tmp/_ssh_auth_sock_stub}'
    ports:
      - '8080-8086:8080-8086'
      - '13000-13199:13000-13199'
    environment:
      # General settings
      SSH_AUTH_SOCK: '${SSH_AUTH_SOCK:-/tmp/_ssh_auth_sock_stub}'

      # ---
      # Ports of services, see README.md for more information
      # ---
      APP_PORT_ASSET: 13001
      APP_PORT_CONDITION_MONITORING: 13002
      APP_PORT_FILE: 13003
      APP_PORT_HUB: 13004
      APP_PORT_MAINTENANCE: 13005
      APP_PORT_TENANT: 13006
      APP_PORT_USER: 13007
      APP_PORT_DEMO_DATA: 13008

      # ---
      # Ports of frontends
      # ---
      APP_FRONTEND_DEV_PORT_ASSET: 13102
      APP_FRONTEND_URL_ASSET: http://localhost:13102
      APP_FRONTEND_DEV_PORT_DOCUMENT: 13105
      APP_FRONTEND_URL_DOCUMENT: http://localhost:13105
      APP_FRONTEND_DEV_PORT_HUB: 13106
      APP_FRONTEND_URL_HUB: http://localhost:13106
      APP_FRONTEND_DEV_PORT_USER: 13109
      APP_FRONTEND_URL_USER: http://localhost:13109
      APP_FRONTEND_DEV_PORT_TENANT: 13108
      APP_FRONTEND_URL_TENANT: http://localhost:13108
      APP_FRONTEND_DEV_PORT_MONITORING: 13103
      APP_FRONTEND_URL_MONITORING: http://localhost:13103
      APP_FRONTEND_DEV_PORT_CONDITION_MONITORING: 13104
      APP_FRONTEND_URL_CONDITION_MONITORING: http://localhost:13104
      SKIP_PREFLIGHT_CHECK: 'true'

      APP_SERVICE_URL_ASSET: http://localhost:13001
      REACT_APP_SERVICE_URL_ASSET: http://localhost:13001

      APP_SERVICE_URL_FILE: http://localhost:13003
      REACT_APP_SERVICE_URL_FILE: http://localhost:13003

      APP_SERVICE_URL_HUB: http://localhost:13004
      REACT_APP_SERVICE_URL_HUB: http://localhost:13004

      APP_SERVICE_URL_USER: http://localhost:8083
      REACT_APP_SERVICE_URL_USER: http://localhost:8083

      APP_SERVICE_URL_MAINTENANCE: http://localhost:13005
      REACT_APP_SERVICE_URL_MAINTENANCE: http://localhost:13005

      APP_PORT_ANOMALY: 8086
      APP_SERVICE_URL_ANOMALY: http://localhost:8086

      # Other configurations (db's, ...)
      APP_DB_HOST: db
      APP_DB_USER: app
      APP_DB_PASS: app
      APP_DB_NAME: app
      APP_DATALAKE_HOST: db
      APP_DATALAKE_USER: app
      APP_DATALAKE_PASS: app
      APP_DATALAKE_NAME: data_lake
      APP_TEST_DB_HOST: db-testing
      APP_TEST_DB_USER: root
      APP_TEST_DB_PASS: root
      APP_TEST_DB_NAME: app-testing
      APP_FILESERVICE_STORAGE_ADAPTER: fs
      APP_USER_SERVICE_ADAPTER: keycloak
      APP_TENANT_SERVICE_ADAPTER: keycloak
      APP_HOSTNAME: host.docker.internal
      APP_KEYCLOAK_BASE_URL: http://host.docker.internal:8000/auth
      APP_KEYCLOAK_REALM_NAME: shopfloor-dev
      APP_KEYCLOAK_CLIENT_ID: shopfloor-identity-backend
      APP_KEYCLOAK_CLIENT_SECRET: d0d30608-438b-417d-ab22-318c8c8f3c71
      OPENID_CLIENT_ID: shopfloor-dev-oidc
      OPENID_WELLKNOWN_URL: http://host.docker.internal:8000/auth/realms/shopfloor-dev/.well-known/openid-configuration
      #Influx db variables
      INFLUXDB_URL: http://influx:8086
      INFLUX_TOKEN: axSMcGi26E31A15CUMLjzhM0cZT4CZs1LSNKuYkSFg-iN9i_TAMRA6i8b7ZNVaBpP4Xx6sZ-A_TxXLJ2fYUsvPQ==
      INFLUX_BUCKET: shopfloor
      INFLUX_ORGANIZATION: shopfloor

      GRAFANA_URL: http://grafana:3000
      GRAFANA_USER: app
      GRAFANA_PASS: app

      MQTT_HOST: rabbitmq
      MQTT_PORT: 1883
      MQTT_USER: admin
      MQTT_PASS: admin

      # Example for a separate database for a specific service
      # APP_DB_HOST_BACKEND2: db-backend2
      # APP_DB_USER_BACKEND2: app
      # APP_DB_PASS_BACKEND2: app
      # APP_DB_NAME_BACKEND2: app

  db:
    image: mysql:8.0.28-oracle
    hostname: db
    ports:
      - 3306:3306
    command: >-
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --authentication_policy=mysql_native_password
    environment:
      MYSQL_DATABASE: app
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mysqldata:/var/lib/mysql
      - ./_fixtures/dockershell/mysql:/docker-entrypoint-initdb.d

  # Example for a separate database for a specific service
  # db-backend2:
  #   image: mysql:8.0.28-oracle
  #   hostname: db-backend2
  #   ports:
  #     - 3307:3306
  #   command: >-
  #     --character-set-server=utf8mb4
  #     --collation-server=utf8mb4_unicode_ci
  #     --authentication_policy=mysql_native_password
  #   environment:
  #     MYSQL_DATABASE: app
  #     MYSQL_USER: app
  #     MYSQL_PASSWORD: app
  #     MYSQL_ROOT_PASSWORD: root
  #   volumes:
  #     - mysqldata_backend2:/var/lib/mysql

  # The testing DB service has no volume. That is by design. [wh]
  db-testing:
    image: mysql:8.0.28-oracle
    hostname: db-testing
    ports:
      - 3307:3306
    command: >-
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --authentication_policy=mysql_native_password
    environment:
      MYSQL_DATABASE: app-testing
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      MYSQL_ROOT_PASSWORD: root

  phpmyadmin:
    image: linuxserver/phpmyadmin
    hostname: phpmyadmin
    ports:
      - 8079:80
    environment:
      PMA_HOSTS: >-
        db,
        db-testing,
      # Example for a separate database for a specific service
      # db-backend2,
      PMA_USER: root
      PMA_PASSWORD: root
      UPLOAD_LIMIT: 1024M

  keycloak:
    image: quay.io/keycloak/keycloak:17.0.1-legacy
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_HOSTNAME: host.docker.internal
      KEYCLOAK_HTTP_PORT: 8000
      DB_VENDOR: h2
      KEYCLOAK_IMPORT: /tmp/realm-import.json
      PROXY_ADDRESS_FORWARDING: 'true'
    # Keyclock can't handle IPv6 and crashes without this
    command: '-Djboss.bind.address.private=127.0.0.1 -Djboss.bind.address=0.0.0.0'
    ports:
      - 8000:8080
    volumes:
      - keycloak_data:/opt/jboss/keycloak/standalone/data/
      - ./keycloak/themes/custom:/opt/jboss/keycloak/themes/custom/
      - ./_fixtures/dockershell/keycloak/realm-import.json:/tmp/realm-import.json:ro

  influxdb:
    image: influxdb:latest
    hostname: influx
    ports:
      - '38086:8086'
    volumes:
      - influxdb_storage:/var/lib/influxdb2
    environment:
      INFLUXDB_DB: shopfloor
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: shopfloor
      DOCKER_INFLUXDB_INIT_BUCKET: shopfloor
      DOCKER_INFLUXDB_INIT_RETENTION: 2w
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: axSMcGi26E31A15CUMLjzhM0cZT4CZs1LSNKuYkSFg-iN9i_TAMRA6i8b7ZNVaBpP4Xx6sZ-A_TxXLJ2fYUsvPQ==

  grafana:
    image: grafana/grafana:8.5.6
    ports:
      - '3000:3000'
    hostname: grafana
    environment:
      GF_SECURITY_ADMIN_USER: app
      GF_SECURITY_ADMIN_PASSWORD: app
      GF_SECURITY_ALLOW_EMBEDDING: 'true'
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
      GF_AUTH_PROXY_ENABLED: 'true'
      GF_AUTH_PROXY_HEADER_NAME: 'X-WEBAUTH-USER'
      GF_AUTH_PROXY_HEADER_PROPERTY: 'username'
      GF_AUTH_PROXY_AUTO_SIGN_UP: 'false'
      GF_AUTH_OAUTH_SKIP_ORG_ROLE_UPDATE_SYNC: 'true'
      GF_SERVER_DOMAIN: 'localhost'
      GF_SERVER_ROOT_URL: '%(protocol)s://%(domain)s:%(http_port)s/service/condition-monitoring/v1/grafana'
      GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
    volumes:
      - grafana_data:/var/lib/grafana

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    command: '/bin/bash -c "rabbitmq-plugins enable --offline rabbitmq_mqtt; rabbitmq-server"'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./_fixtures/dockershell/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - '1883:1883'
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
